<!DOCTYPE html>
<html>
<head>
  <title>Your Dream Farm</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <style>
    html, body {
      margin: 0;
      padding: 0;
      background: #a7d89c;
      overflow: hidden;
    }
    canvas {
      display: block;
      margin: auto;
      background: #6db46d;
      image-rendering: pixelated;
      touch-action: none;
    }
    #controls {
      position: absolute;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 10px;
      z-index: 10;
    }
    .btn {
      width: 50px;
      height: 50px;
      font-size: 20px;
      border-radius: 50%;
      background: white;
      border: 2px solid #333;
    }
    #luna, #sparklePortal {
      position: absolute;
      width: 32px;
      image-rendering: pixelated;
    }
    #luna {
      left: 160px;
      top: 64px;
    }
    #sparklePortal {
      left: 0;
      top: 0;
      height: 32px;
      background: pink;
      border: 1px solid white;
    }
    #lunaSpeech, #sparkleMessage {
      position: absolute;
      background: #fff9;
      border: 1px solid #888;
      padding: 8px;
      font-family: sans-serif;
      font-size: 12px;
      display: none;
      z-index: 20;
    }
    #lunaSpeech {
      top: 30px;
      left: 140px;
      width: 180px;
    }
    #sparkleMessage {
      top: 50px;
      left: 50px;
      width: 180px;
    }
  </style>
</head>
<body>

<canvas id="game" width="512" height="512"></canvas>

<!-- NPC and sparkle elements -->
<img id="luna" src="luna.png">
<div id="sparklePortal"></div>
<div id="lunaSpeech">Hi there! I'm Luna üí´<br>Welcome to our little town!<br>I'll help you get started üå±</div>
<div id="sparkleMessage">üåü You found the Sparkle Room! üåà<br>So magical... üíñ</div>

<!-- Mobile controls -->
<div id="controls">
  <button class="btn" id="left">‚¨ÖÔ∏è</button>
  <button class="btn" id="up">‚¨ÜÔ∏è</button>
  <button class="btn" id="down">‚¨áÔ∏è</button>
  <button class="btn" id="right">‚û°Ô∏è</button>
  <button class="btn" id="plant">üå±</button>
  <button class="btn" id="harvest">ü•ï</button>
</div>

<script>
const canvas = document.getElementById("game");
const ctx = canvas.getContext("2d");
const tileSize = 32;

let cols = 16;
let rows = 16;
canvas.width = cols * tileSize;
canvas.height = rows * tileSize;

const player = { x: 2, y: 10, color: "brown" };
const pet = { x: 1, y: 10, color: "orange" };
const npc = { x: 5, y: 2, color: "purple", name: "Luna" };
let farm = JSON.parse(localStorage.getItem("dreamFarm")) || Array(5).fill().map(() => Array(5).fill(0));
let inventory = JSON.parse(localStorage.getItem("dreamInventory")) || { carrots: 0, coins: 0 };
let currentMap = "outside";

// Time system
let time = 6, timeCounter = 0, timeSpeed = 60, day = 1, season = "Spring", isRaining = false;
const seasons = ["Spring", "Summer", "Fall", "Winter"];

const keys = {};
document.addEventListener("keydown", e => keys[e.key] = true);
document.addEventListener("keyup", e => keys[e.key] = false);
["up", "down", "left", "right", "plant", "harvest"].forEach(id => {
  document.getElementById(id).onclick = () => {
    if (id === "plant" || id === "harvest") doAction(id);
    else move(id);
  };
});

function move(dir) {
  if (dir === "up") player.y--;
  if (dir === "down") player.y++;
  if (dir === "left") player.x--;
  if (dir === "right") player.x++;

  // Follow
  if (pet.x < player.x) pet.x++;
  if (pet.x > player.x) pet.x--;
  if (pet.y < player.y) pet.y++;
  if (pet.y > player.y) pet.y--;

  // Map change
  if (currentMap === "outside" && player.x >= 1 && player.x <= 2 && player.y === 4) {
    currentMap = "inside"; player.x = 2; player.y = 4; pet.x = 1; pet.y = 4;
  }
  if (currentMap === "inside" && player.x === 2 && player.y === 0) {
    currentMap = "outside"; player.x = 2; player.y = 5; pet.x = 1; pet.y = 5;
  }
}

function doAction(type) {
  const fx = player.x - 11;
  const fy = player.y - 10;
  if (fx >= 0 && fx < 5 && fy >= 0 && fy < 5) {
    if (type === "plant" && farm[fy][fx] === 0) farm[fy][fx] = 1;
    if (type === "harvest" && farm[fy][fx] === 1) {
      farm[fy][fx] = 0;
      inventory.carrots++; inventory.coins += 5;
    }
    localStorage.setItem("dreamFarm", JSON.stringify(farm));
    localStorage.setItem("dreamInventory", JSON.stringify(inventory));
  }
}

function updateTime() {
  timeCounter++;
  if (timeCounter >= timeSpeed) {
    timeCounter = 0;
    time++;
    if (time > 23) {
      time = 0; day++;
      if (day % 7 === 1) season = seasons[(seasons.indexOf(season)+1) % seasons.length];
      isRaining = Math.random() < 0.3;
    }
  }
}

function getTimeLabel(hour) {
  if (hour < 12) return hour + " AM";
  if (hour === 12) return "12 PM";
  return (hour - 12) + " PM";
}

function getSkyColor() {
  if (isRaining) return "#5a5a78";
  const sky = {
    Spring: ["#a7d89c", "#87ceeb", "#f4b183", "#4b3869", "#1a1a40"],
    Summer: ["#e0f7fa", "#29b6f6", "#ffcc80", "#5d4037", "#2c3e50"],
    Fall:   ["#ffe0b2", "#ffb74d", "#ff8a65", "#4e342e", "#263238"],
    Winter: ["#e0f2f1", "#b2ebf2", "#90a4ae", "#455a64", "#263238"]
  }[season];
  if (time < 9) return sky[0];
  if (time < 17) return sky[1];
  if (time < 19) return sky[2];
  if (time < 22) return sky[3];
  return sky[4];
}

function draw() {
  ctx.fillStyle = getSkyColor();
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  if (currentMap === "outside") {
    for (let y = 0; y < rows; y++)
      for (let x = 0; x < cols; x++) {
        ctx.fillStyle = "#7cc17d";
        ctx.fillRect(x * tileSize, y * tileSize, tileSize, tileSize);
      }

    ctx.fillStyle = "#a9746e";
    ctx.fillRect(0, 0, 4 * tileSize, 4 * tileSize);

    for (let y = 0; y < 5; y++)
      for (let x = 0; x < 5; x++) {
        const tile = farm[y][x];
        const px = (x + 11) * tileSize;
        const py = (y + 10) * tileSize;
        ctx.fillStyle = "#8b5e3c";
        ctx.fillRect(px, py, tileSize, tileSize);
        if (tile === 1) {
          ctx.fillStyle = "#f28c28";
          ctx.beginPath();
          ctx.arc(px + 16, py + 16, 8, 0, Math.PI * 2);
          ctx.fill();
        }
      }

    ctx.fillStyle = npc.color;
    ctx.fillRect(npc.x * tileSize, npc.y * tileSize, tileSize, tileSize);
  }

  if (currentMap === "inside") {
    ctx.fillStyle = "#f5e2c8";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = "#333";
    ctx.fillRect(2 * tileSize, 0, tileSize, tileSize);
    ctx.fillStyle = "#ffb6b6";
    ctx.fillRect(4 * tileSize, 3 * tileSize, tileSize * 2, tileSize);
  }

  ctx.fillStyle = pet.color;
  ctx.fillRect(pet.x * tileSize, pet.y * tileSize, tileSize, tileSize);

  ctx.fillStyle = player.color;
  ctx.fillRect(player.x * tileSize, player.y * tileSize, tileSize, tileSize);

  if (currentMap === "outside" && player.x === npc.x && player.y === npc.y - 1) {
    document.getElementById("lunaSpeech").style.display = "block";
  } else {
    document.getElementById("lunaSpeech").style.display = "none";
  }

  if (isRaining) {
    ctx.fillStyle = "rgba(150,150,200,0.2)";
    for (let i = 0; i < 100; i++) {
      const rx = Math.random() * canvas.width;
      const ry = Math.random() * canvas.height;
      ctx.fillRect(rx, ry, 2, 10);
    }
  }

  ctx.fillStyle = "white";
  ctx.font = "16px Arial";
  ctx.fillText("Time: " + getTimeLabel(time), 10, 20);
  ctx.fillText("Day " + day + " - " + season, 10, 40);
  if (isRaining) ctx.fillText("Rainy ‚òî", 10, 60);

  ctx.fillRect(canvas.width - 160, 0, 160, 64);
  ctx.fillStyle = "black";
  ctx.fillText("Carrots: " + inventory.carrots, canvas.width - 150, 20);
  ctx.fillText("Coins: " + inventory.coins + "g", canvas.width - 150, 40);
}

function checkSparklePortal() {
  if (player.x === 0 && player.y === 0) {
    player.x = 9;
    player.y = 9;
    document.getElementById("sparkleMessage").style.display = "block";
    setTimeout(() => {
      document.getElementById("sparkleMessage").style.display = "none";
    }, 4000);
  }
}

function loop() {
  if (keys["ArrowUp"]) move("up");
  if (keys["ArrowDown"]) move("down");
  if (keys["ArrowLeft"]) move("left");
  if (keys["ArrowRight"]) move("right");
  if (keys[" "] || keys["Spacebar"]) {
    doAction("plant"); keys[" "] = false; keys["Spacebar"] = false;
  }
  if (keys["h"] || keys["H"]) {
    doAction("harvest"); keys["h"] = false; keys["H"] = false;
  }

  updateTime();
  draw();
  checkSparklePortal();
  requestAnimationFrame(loop);
}
loop();
</script>

</body>
</html>
